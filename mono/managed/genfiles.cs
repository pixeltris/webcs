// %WINDIR%\Microsoft.NET\Framework\v4.0.30319\csc.exe genfiles.cs
using System;
using System.IO;
using System.Collections.Generic;
using System.Reflection;
using System.Text;

namespace Genfiles
{
    class Program
    {
        static void Main()
        {
            HashSet<string> dirs = new HashSet<string>();
            dirs.Add("icu");
            dirs.Add("sdk");
            dirs.Add("bin");
            int indent = 0;
            StringBuilder sb = new StringBuilder();
            WriteLine(sb, indent++, "{");
            WriteLine(sb, indent, "\"GENERATED_DO_NOT_EDIT\": \"This is a generated by genfiles.exe - it searches for all files recursively and lists them here.\",");
            WriteLine(sb, indent++, "\"files\": [");
            foreach (string dir in dirs)
            {
                WriteFilesRecursive(dir, sb, ref indent);
            }
            TrimTrailingComma(sb);
            WriteLine(sb, --indent, "]");
            WriteLine(sb, --indent, "}");
            File.WriteAllText("files.json", sb.ToString());
        }
        
        static void WriteFilesRecursive(string dir, StringBuilder sb, ref int indent)
        {
            foreach (string path in Directory.GetFiles(dir))
            {
                FileInfo fileInfo = new FileInfo(path);
                string behavior = null;
                WriteLine(sb, indent++, "{");
                switch (Path.GetExtension(path).ToLower())
                {
                    case ".dll":
                    case ".exe":
                        try
                        {
                            AssemblyName assemblyName = AssemblyName.GetAssemblyName(path);
                            WriteLine(sb, indent, "\"assemblyName\": \"" + assemblyName.FullName + "\",");
                        }
                        catch
                        {
                        }
                        break;
                }
                if (behavior != null)
                {
                    WriteLine(sb, indent, "\"behavior\": \"" + behavior + "\",");
                }
                WriteLine(sb, indent, "\"path\": \"" + path.Replace("\\", "/") + "\",");
                WriteLine(sb, indent, "\"size\": " + fileInfo.Length);
                WriteLine(sb, --indent, "},");
            }
            foreach (string subDir in Directory.GetDirectories(dir))
            {
                WriteFilesRecursive(subDir, sb, ref indent);
            }
        }
        
        static void WriteLine(StringBuilder sb, int indent, string str)
        {
            sb.AppendLine(string.Empty.PadLeft(indent * 4, ' ') + str);
        }
        
        static void TrimTrailingComma(StringBuilder sb)
        {
            for (int i = sb.Length - 1; i >= 0; i--)
            {
                if (sb[i] == '\r' || sb[i] == '\n' || char.IsWhiteSpace(sb[i]))
                {
                    continue;
                }
                if (sb[i] == ',')
                {
                    sb.Length = i;
                    sb.AppendLine();
                }
                break;
            }
        }
    }
}